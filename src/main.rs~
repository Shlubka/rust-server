#[macro_use]
extern crate rocket;

use rocket::serde::{json::Json, Deserialize};
use rocket::{fs::NamedFile, response::Redirect};
use std::path::{Path, PathBuf};

#[derive(Deserialize)]
#[serde(crate = "rocket::serde")]
struct UserData<'r> {
    language: &'r str,
    code: &'r str,
    promo: &'r str,
}

#[get("/")]
fn index() -> Redirect {
    let redirect = Redirect::to(uri!("/index"));
    redirect
}

#[get("/index")]
async fn home() -> Option<NamedFile> {
    NamedFile::open("index.html").await.ok()
}

#[post("/lang", data = "<data>")]
fn get_keys(data: Json<UserData<'_>>) -> Redirect {
    let language = data.language.to_string();
    let code = data.code.to_string();
    let promo = data.promo.map(|s| s.to_string());

    let r_uri = format!(
        "/lang/{}?code={}&promo={}",
        language,
        code,
        promo.unwrap_or_default()
    );

    Redirect::to(r_uri)
}

#[get("/lang/<lang>")]
fn start_logick(lang: String, code: Option<String>, promo: Option<String>) -> String {
    format!(
        "Language: {}, Code: {}, Promo: {:?}",
        lang,
        code.unwrap_or_default(),
        promo
    )
}

#[get("/<file..>")]
async fn files(file: PathBuf) -> Option<NamedFile> {
    NamedFile::open(Path::new("").join(file)).await.ok()
}

#[launch]
fn rocket() -> _ {
    rocket::build().mount("/", routes![index, home, get_keys, files])
}
